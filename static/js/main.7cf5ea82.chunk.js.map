{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/TodoInput.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","this","props","title","handleDelete","handleEdit","className","onClick","Component","TodoList","items","clearList","map","item","key","id","type","TodoInput","handleChange","handleSubmit","editItem","onSubmit","placeholder","value","onChange","App","state","uuid","e","setState","target","preventDefault","newItem","updateItems","filteredItems","filter","selectedItem","find","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cf5ea82.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n    render() {\n        const{title,handleDelete,handleEdit} = this.props\n        return (\n            <div className = \" list-group-item text-capitalize d-flex justify-content-between my-2\">\n               <h6>{title}</h6>\n               <div className = \"todo-icon\">\n                   <span className = \"mx-2 text-success\">\n                       <i className = \"fas fa-pen\" onClick={handleEdit}/>\n                   </span>\n                   <span className = \"mx-2 text-danger\" onClick={handleDelete}>\n                       <i className = \"fas fa-trash\"/>\n                   </span>\n               </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TodoItem from './TodoItem'\n\n\nexport default class TodoList extends Component {\n    render() {\n        const {items,clearList,handleDelete,handleEdit} = this.props\n        return (\n            <ul className = \"list-group my-5 bg-light\">\n               <h3 className = \"text-capitalize text-center\">todo list</h3>\n               {\n                   items.map(item => {\n                       return(\n                        <TodoItem  key ={item.id} \n                        title={item.title}\n                      handleDelete={()=> handleDelete(item.id)} \n                      handleEdit={()=> handleEdit(item.id)}/> \n\n                      )\n                   })\n               }\n               \n               \n               <button type = \"button\" className = \"btn btn-danger btn-block text-capitalize mt-5\" onClick={clearList}>clear list</button>\n            </ul>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    render() {\n        const {item,handleChange,handleSubmit,editItem} = this.props\n        return (\n            <div className = \"card card-body my-3\">\n    <form onSubmit = {handleSubmit}>\n          <div className = \"input-group\">\n                <div className = \"input-group-prepand\">\n                <div className = \"input-group-text bg-primary text-white\">\n                    <i className = \"fas fa-book\"/>\n                </div>\n                </div>\n                <input type = \"text\" className = \"form-control text-capitalize\" placeholder = \"add a todo item\" value = {item} onChange = {handleChange}/>\n            </div>\n        <button type = \"submit\" className ={\n            editItem ? \"btn btn-block btn-success mt-3\":\"btn btn-block btn-secondary mt-3\"\n        } > {editItem ? 'Edit Item':\"Add Item\"}</button>\n            </form>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport TodoList from './Components/TodoList';\nimport TodoInput from './Components/TodoInput';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"react-uuid\";\nclass App extends React.Component {\n  state = {\n    items:[],\n    id:uuid(),\n    item:\"\",\n    editItem:false\n  };\n  handleChange = e => {\n    this.setState({item:e.target.value});\n  };\n  handleSubmit = e => {\n  e.preventDefault();\n  const newItem = {\n    id:this.state.id,\n    title:this.state.item\n  };\n  \n  const updateItems=[...this.state.items,newItem];\n  this.setState({\n    items:updateItems,\n    item:\"\",\n    id:uuid(),\n    editItem:false\n  });\n  };\n  clearList = () => {\n    this.setState({\n      items:[]\n    });\n  };\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter\n    (item => item.id !== id);\n    this.setState({\n      items:filteredItems\n    });\n  };\n  handleEdit = (id) =>{\n    const filteredItems = this.state.items.filter\n    (item => item.id !== id);\n    const selectedItem = this.state.items.find(item =>\n      item.id === id);\n    \n    \n    this.setState({\n      items:filteredItems,\n      item:selectedItem.title,\n      editItem:true,\n      id:id\n    });\n    \n\n\n  };\n  render(){\n    return (\n      <div className = \"container bg-color bg-info\">\n        <div className = \"row\">\n        <div className = \"col-10 mx-auto col-md-8 mt-4\">\n        <h3 className = \"text-capitalize text-center text-white\"><u>todo input</u></h3>\n        <TodoInput  item = {this.state.item}\n         handleChange= {this.handleChange}\n         handleSubmit = {this.handleSubmit}\n         editItem={this.state.editItem}/>\n        \n        <TodoList items={this.state.items} \n        clearList={this.clearList} handleDelete ={this.handleDelete}\n        handleEdit={this.handleEdit}/>\n        </div>\n  </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}